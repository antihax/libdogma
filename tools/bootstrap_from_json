#!/usr/bin/env php
<?php
/* libdogma
 * Copyright (C) 2012, 2013, 2014, 2015, 2016, 2017 Romain "Artefact2" Dalmaso <artefact2@gmail.com>
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

ini_set('memory_limit', '-1');

const LOCALE_SUFFIX = '_en-us';

function fatal($message) {
	global $argv;

	fwrite(STDERR, $argv[0].": FATAL ".$message."\n");
	die(1);
}

function warn($message) {
	global $argv;

	fwrite(STDERR, $argv[0].": WARNING ".$message."\n");
}

function info($message) {
    global $argv;
    fwrite(STDOUT, $argv[0].": INFO ".$message."\n");
}

function escape_c_string($str) {
	return '"'.str_replace('"', '\"', $str).'"';
}

function load_json($jsonpath) {
	static $neededjson = array(
		'categories' => 'evecategories.json',
		'groups' => 'evegroups.json',
		'types' => 'evetypes.json',
		'attribs' => 'dgmattribs.json',
		'typeattribs' => 'dgmtypeattribs.json',
		'effects' => 'dgmeffects.json',
		'typeeffects' => 'dgmtypeeffects.json',
		'expressions' => 'dgmexpressions.json',
		'operands' => 'dogma()_GetOperandsForChar().json',
	);
	$json = array();

	foreach($neededjson as $idx => $file) {
		$file = $jsonpath.'/'.$file;
		if(!file_exists($file)) fatal('could not find '.$file);

		$jsontext = file_get_contents($file);
		if($jsontext === false) fatal('could not read '.$file);

		$json[$idx] = json_decode($jsontext, true);
		if(json_last_error() !== JSON_ERROR_NONE) fatal('could not parse JSON in '.$file);

		foreach($json[$idx] as &$row) {
			foreach($row as $k => $v) {
				if(substr($k, -strlen(LOCALE_SUFFIX)) === LOCALE_SUFFIX
				   && !isset($row[$attr = substr($k, 0, -strlen(LOCALE_SUFFIX))])) {
					$row[$attr] = $v;
				}
			}
		}
	}

	return $json;
}

function strip_index_types(&$json) {
	$groupsbyid = array();
	$types = array();

	foreach($json['groups'] as $g) {
		$groupsbyid[$g['groupID']] = $g;
	}

	foreach($json['types'] as $t) {
		$t['categoryID'] = $groupsbyid[$t['groupID']]['categoryID'];

		/* XXX: Oceanus fucked this up by unpublishing modules still
		 * being used on TQ. */
		if(/*$t['published'] !== true || $groupsbyid[$t['groupID']]['published'] !== true
		     || */ !in_array($t['categoryID'], array(6, 7, 8, 16, 18, 20, 32), true)) {

			/* Keep effect beacons */
			if($t['categoryID'] !== 2 || $t['groupID'] !== 920) {
				continue;
			}
		}

		/* XXX: don't include Dust types */
		if($t['typeID'] >= 350000) continue;

		$types[$t['typeID']] = $t;
	}

	ksort($types);
	$json['types'] = $types;
}

function strip_index_groups(&$json) {
	$hasgroups = array();

	foreach($json['types'] as $t) {
		$hasgroups[$t['groupID']] = true;
	}

	$groups = array();
	foreach($json['groups'] as $g) {
		if(isset($hasgroups[$g['groupID']])) {
			$groups[$g['groupID']] = $g;
		}
	}

	$json['groups'] = $groups;
}

function strip_index_attributes(&$json) {
	/* Filtering unused attributes is non-trivial. Some attributes may
	 * be only used in some expressions and not appear in typeattribs
	 * at all, and some attributes that are not currently used may be
	 * used later in some overridden expressions. Because of this,
	 * attributes are not filtered here. */

	foreach($json['typeattribs'] as $k => $ta) {
		if(!isset($json['types'][$ta['typeID']])) {
			unset($json['typeattribs'][$k]); /* Attribute of an unknown type */
		}
	}

	$attribs = array();
	foreach($json['attribs'] as $a) {
		$attribs[$a['attributeID']] = $a;
	}

	ksort($attribs);
	$json['attribs'] = $attribs;
}

function strip_index_effects(&$json) {
	$usedeffectsbyid = array();

	foreach($json['typeeffects'] as $k => $te) {
		if(!isset($json['types'][$te['typeID']])) {
			unset($json['typeeffects'][$k]); /* Effect of an unknown type */
		}

		$usedeffectsbyid[$te['effectID']] = true;
	}

	$effects = array();
	foreach($json['effects'] as $e) {
		if(!isset($usedeffectsbyid[$e['effectID']])) {
			continue;
		}

		$effects[$e['effectID']] = $e;
	}

	ksort($effects);
	$json['effects'] = $effects;
}

function strip_index_operands(&$json) {
	/* Assume all operands are used, there are not that many and the
	 * only overhead would be at compile-time anyway */
	$operands = array();

	foreach($json['operands'] as $op) {
		$operands[$op['operandID']] = $op;
	}

	ksort($operands);
	$json['operands'] = $operands;
}

function strip_index_expressions(&$json) {
	$expressions = array();

	foreach($json['expressions'] as $e) {
		$expressions[$e['expressionID']] = $e;
	}

	ksort($expressions);
	$json['expressions'] = $expressions;

	$used = array();
	$added = 0;

	foreach($json['effects'] as $e) {
		$used[$e['preExpression']] = true;
		$used[$e['postExpression']] = true;
		++$added;
	}

	while($added > 0) {
		$added = 0;

		foreach($used as $id => $true) {
			if($id == null) continue;

			$arg1 = $json['expressions'][$id]['arg1'];
			$arg2 = $json['expressions'][$id]['arg2'];

			if(!isset($used[$arg1])) {
				$used[$arg1] = true;
				++$added;
			}
			if(!isset($used[$arg2])) {
				$used[$arg2] = true;
				++$added;
			}
		}
	}

	foreach($json['expressions'] as $k => $v) {
		if(!isset($used[$k])) {
			unset($json['expressions'][$k]);
		}
	}
}

function normalize_expressions(&$json) {
	foreach($json['expressions'] as &$e) {
		switch($e['operandID']) {
			
		case 21: /* Assoc */
		case 23: /* Float */
		case 24: /* Env Index */
		case 25: /* Bool */
		case 27: /* Int */
		case 28: /* String */
			$e['expressionAttributeID'] = null;
			$e['expressionGroupID'] = null;
			$e['expressionTypeID'] = null;
			if($e['expressionValue'] === null) {
				fatal("expression {$e['expressionID']} has no value");
			}
			break;

		case 22: /* Attribute */
			if($e['expressionAttributeID'] === null) {
				fatal("expression {$e['expressionID']} has no attribute ID");
			}
			
			$e['expressionValue'] = null;
			$e['expressionGroupID'] = null;
			$e['expressionTypeID'] = null;
			break;

		case 26: /* Group */
			if($e['expressionGroupID'] === null) {
				/* Assume the value is a groupName */
				$mangledname = preg_replace('%(.)([A-Z])%', '$1 $2', $e['expressionValue']);
				foreach($json['groups'] as $g) {
					if($g['groupName'] === $mangledname) {
						$e['expressionGroupID'] = $g['groupID'];
						warn('expression '.$e['expressionID'].' with operand DEFGROUP has no groupID, using '
						     .$g['groupID'].' assuming "'.$e['expressionValue'].'" is a group name');
						break;
					}
				}

				if($e['expressionValue'] === '    None') {
					warn('expression '.$e['expressionID'].' with operand DEFGROUP has no groupID'
					     .' and has hardcoded value: "'.$e['expressionValue'].'", using groupID 0');

					$e['expressionGroupID'] = 0;
				}

				if($e['expressionGroupID'] === null) {
					fatal("expression {$e['expressionID']} has no group ID");
				}
			}
			
			$e['expressionValue'] = null;
			$e['expressionAttributeID'] = null;
			$e['expressionTypeID'] = null;
			break;

		case 29: /* Type */
			if($e['expressionTypeID'] === null) {
				fatal("expression {$e['expressionID']} has no type ID");
			}
			
			$e['expressionValue'] = null;
			$e['expressionAttributeID'] = null;
			$e['expressionGroupID'] = null;
			break;

		default:
			$e['expressionValue'] = null;
			$e['expressionAttributeID'] = null;
			$e['expressionGroupID'] = null;
			$e['expressionValue'] = null;
			break;
			
		}
	}
}

function combine_canonical_form(&$json, array $expr, array &$combined) {
	if($expr['operandID'] !== 17) {
		$combined[] = $expr['expressionID'];
		return;
	}

	combine_canonical_form($json, $json['expressions'][$expr['arg1']], $combined);
	combine_canonical_form($json, $json['expressions'][$expr['arg2']], $combined);
}

function expression_canonical_form(&$json, array $expr) {
	static $keys = [
		'arg1',
		'arg2',
		'expressionAttributeID',
		'expressionGroupID',
        'expressionTypeID',
        'expressionValue',
		'operandID',
	];

	if($expr['operandID'] === 17) {
		/* COMBINE */
		$combined = [];
		combine_canonical_form($json, $expr, $combined);
		sort($combined);
		return json_encode($combined);
	}

	$stdexp = [];
	foreach($keys as $k) {
		$stdexp[$k] = isset($expr[$k]) ? $expr[$k] : null;
	}

	return json_encode($stdexp);
}

function query_or_insert_expression(&$json, array $exprfilter) {
	static $cache = null;
    static $lowestid = -1000;

    while($cache === null) {
	    foreach($json['expressions'] as $expr) {
		    $id = $expr['expressionID'];
		    $k = expression_canonical_form($json, $expr);
		    if(isset($cache[$k])) {
			    $newid = $cache[$k];
			    info("replacing dupe expression {$id} ~~~> {$newid}");

			    foreach($json['effects'] as &$e) {
				    if($e['preExpression'] === $id) $e['preExpression'] = $newid;
				    if($e['postExpression'] === $id) $e['postExpression'] = $newid;
			    }

			    foreach($json['expressions'] as &$e) {
				    if($e['arg1'] === $id) $e['arg1'] = $newid;
				    if($e['arg2'] === $id) $e['arg2'] = $newid;
			    }

			    unset($json['expressions'][$id]);

			    $cache = null;
			    $lowestid = -1000;
			    continue 2;
		    } else {
			    $cache[$k] = $id;
		    }
	    }
    }
    
    $exprfilter += [
	    'arg1' => null,
	    'arg2' => null,
	    'expressionAttributeID' => null,
	    'expressionGroupID' => null,
	    'expressionTypeID' => null,
	    'expressionValue' => null,
	    'operandID' => null,
    ];
    
    $efstr = expression_canonical_form($json, $exprfilter);
    if(isset($cache[$efstr])) {
	    info("cache hit for {$efstr} => {$cache[$efstr]}");
	    return $cache[$efstr];
    }
    
    /* Insert expression */
    $lowestid--;
    info("inserted {$efstr} => {$lowestid}");
    $exprfilter['expressionID'] = $lowestid;
    $json['expressions'][$lowestid] = $exprfilter;
    return $cache[$efstr] = $lowestid;
}

function combine_expressions(&$json, array $expressionids) {
    while(count($expressionids) > 1) {
        $a = array_shift($expressionids);
        $b = array_shift($expressionids);
        $expressionids[] = query_or_insert_expression($json, [
            'operandID' => 17, /* COMBINE */
            'arg1' => $a,
            'arg2' => $b,
        ]);
    }

    return array_pop($expressionids);
}

/* DEFASSOCIATION($assoc) */
function mkexpr_association(&$json, $assoc) {
	return query_or_insert_expression($json, [
		'operandID' => 21,
		'expressionValue' => $assoc,
	]);
}

/* DEFENVIDX($env) */
function mkexpr_envidx(&$json, $env) {
	return query_or_insert_expression($json, [
		'operandID' => 24,
		'expressionValue' => $env,
	]);
}

/* DEFATTRIBUTE($attr) */
function mkexpr_attribute(&$json, $attr) {
	return query_or_insert_expression($json, [
		'operandID' => 22,
		'expressionAttributeID' => $attr,
	]);
}

/* $env->$attr */
function mkexpr_att(&$json, $env, $attr) {
	return query_or_insert_expression($json, [
		'operandID' => 12, /* ATT */
		'arg1' => mkexpr_envidx($json, $env),
		'arg2' => mkexpr_attribute($json, $attr),
	]);
}

/* ($env->$attr).($assoc) */
function mkexpr_eff(&$json, $assoc, $env, $attr) {
	return query_or_insert_expression($json, [
		'operandID' => 31,
		'arg1' => mkexpr_association($json, $assoc),
		'arg2' => mkexpr_att($json, $env, $attr),
	]);
}

/* (($destenv->$destattr).($assoc)).AddItemModifier($srcattr) */
function mkexpr_aim(&$json, $assoc, $destenv, $destattr, $srcattr, $customsrc = false) {
	return query_or_insert_expression($json, [
		'operandID' => 6,
		'arg1' => mkexpr_eff($json, $assoc, $destenv, $destattr),
		'arg2' => $customsrc ? $srcattr : mkexpr_attribute($json, $srcattr),
	]);
}

/* Turns AIM into RIM, etc. Returns new exprID */
function flip_modifiers(&$json, $id) {
	static $mods = null;

	if($mods === null) {
		$mods = [
			2 => 54, /* GangGroupModifier */
			3 => 55, /* GangItemModifier */
			4 => 56, /* GangOwnerRequiredSkillModifier */
			5 => 57, /* GangRequiredSkillModifier */
			6 => 58, /* ItemModifier */
			7 => 59, /* LocationGroupModifier */
			8 => 60, /* LocationModifier */
			9 => 61, /* LocationRequiredSkillModifier */
			11 => 62, /* OwnerRequiredSkillModifier */
		];
		foreach($mods as $a => $r) $mods[$r] = $a;
	}
	
	assert(isset($json['expressions'][$id]));
	$exp = $json['expressions'][$id];

	if(isset($exp['arg1'])) {
		$exp['arg1'] = flip_modifiers($json, $exp['arg1']);
	}
	if(isset($exp['arg2'])) {
		$exp['arg2'] = flip_modifiers($json, $exp['arg2']);
	}

	if(isset($mods[$exp['operandID']])) {
		$exp['operandID'] = $mods[$exp['operandID']];
	}

	return query_or_insert_expression($json, $exp);
}

/* ---------------- */

if($argc !== 2) {
	echo "Usage: ".$argv[0]." <path_to_json_dump>\n";
	die(2);
}

$json = load_json(rtrim($argv[1], '/'));

$targetsource = __DIR__.'/../src/tables-data.h';
$c = fopen($targetsource, 'wb');
if($c === false) fatal('could not open '.$targetsource.' for writing');

$targetheader = __DIR__.'/../src/operands.h';
$h = fopen($targetheader, 'wb');
if($h === false) fatal('could not open '.$targetheader.' for writing');


fwrite(
	$c,
	"/* libdogma */\n\n"
	."/* THIS FILE HAS BEEN AUTOGENERATED. DO NOT MODIFY IT MANUALLY.\n"
	." * IT IS NOT COVERED BY THE LICENSE IN THE COPYING FILE.\n"
	." *\n"
	." * ".__FILE__."\n"
	." * ".date('r')." */\n"
	."\n\n");

fwrite(
	$h,
	"/* libdogma */\n\n"
	."/* THIS FILE HAS BEEN AUTOGENERATED. DO NOT MODIFY IT MANUALLY.\n"
	." * IT IS NOT COVERED BY THE LICENSE IN THE COPYING FILE.\n"
	." *\n"
	." * ".__FILE__."\n"
	." * ".date('r')." */\n"
	."\n"
	."#pragma once\n"
	."#ifndef _DOGMA_OPERANDS_H\n"
	."#define _DOGMA_OPERANDS_H 1 \n"
	."\n\n\n");

/* -------- Types -------- */

strip_index_types($json);
strip_index_groups($json);

fwrite($c, "static const dogma_type_t dogma_table_types[] = {\n");
foreach($json['types'] as $t) {
	fwrite($c, "\t{ "
	       .$t['typeID'].'U'
	       .", ".$t['volume']
	       .", ".$t['mass']
	       .", ".$t['capacity']
	       .", ".$t['groupID'].'U'
	       .", ".$t['categoryID'].'U'
	       ." },\n");
}
fwrite($c, "\t{ 0U, 0, 0, 0, 0U, 0U }\n");
fwrite($c, "};\n");

/* -------- Attributes -------- */

strip_index_attributes($json);

fwrite($c, "static const dogma_attribute_t dogma_table_attributes[] = {\n");
foreach($json['attribs'] as $a) {
	fwrite($c, "\t{ "
	       .$a['attributeID'].'U'
	       .", ".$a['defaultValue']
	       .", ".($a['stackable'] ? 'true' : 'false')
	       .", ".($a['highIsGood'] ? 'true' : 'false')
	       ." },\n");
}
fwrite($c, "\t{ 0U, 0, false, false }\n");
fwrite($c, "};\n");

/* -------- Effects -------- */

strip_index_effects($json);
strip_index_operands($json);
strip_index_expressions($json);
normalize_expressions($json);

foreach($json['effects'] as &$effect) {
    if(!$effect['modifierInfo']) continue;
    
    info("overwriting expressions of effect ".$effect['effectName']." using modifierInfo");
    $info = yaml_parse($effect['modifierInfo']);

    foreach($info as $k => &$modifier) {
        /* Lots of code to create, tediously, an expression that looks like:

           For ItemModifiers:
           (($domain->$modifiedAttributeID).($operator)).$func($modifyingAttributeID)

           For LocationRequiredSkillModifiers / OwnerRequiredSkillModifiers:
           (($domain[$skillTypeID]->$modifiedAttributeID).($operator)).$func($modifyingAttributeID)

           For LocationGroupModifiers:
           (($domain..$groupID->$modifiedAttributeID).($operator)).$func($modifyingAttributeID)

           For GangItemModifiers:
           [($modifiedAttributeID).($operator)].$func($modifyingAttributeID)

           For GangRequiredSkillModifiers:
           [($skillTypeID.$modifiedAttributeID).($operator)].$func($modifyingAttributeID)
         */

	    if($modifier['func'] === 'EffectStopper') {
		    /* XXX: properly implement this */
	        warn("ignoring EffectStopper for effect ".$effect['effectID']);
	        unset($info[$k]);
	        continue;
	    }

        $modifiedattribute = query_or_insert_expression($json, [
            'operandID' => 22, /* DEFATTRIBUTE */
            'expressionAttributeID' => $modifier['modifiedAttributeID'],
        ]);

        $modifyingattribute = query_or_insert_expression($json, [
            'operandID' => 22, /* DEFATTRIBUTE */
            'expressionAttributeID' => $modifier['modifyingAttributeID'],
        ]);

	    if(!array_key_exists('domain', $modifier)) $modifier['domain'] = '___none___';
	    
        switch($modifier['domain']) {
            
        case 'charID':
            $domain = query_or_insert_expression($json, [
                'operandID' => 24, /* DEFENVIDX */
                'expressionValue' => 'Char',
            ]);
            break;
            
        case 'shipID':
        case 'structureID': /* XXX */
            $domain = query_or_insert_expression($json, [
                'operandID' => 24, /* DEFENVIDX */
                'expressionValue' => 'Ship',
            ]);
            break;
            
        case 'targetID':
        case 'target': /* XXX? */
            $domain = query_or_insert_expression($json, [
                'operandID' => 24, /* DEFENVIDX */
                'expressionValue' => 'Target',
            ]);
            break;
            
        case 'otherID':
            $domain = query_or_insert_expression($json, [
                'operandID' => 24, /* DEFENVIDX */
                'expressionValue' => 'Other',
            ]);
            break;

        case 'itemID':
        case null:
            $domain = query_or_insert_expression($json, [
                'operandID' => 24, /* DEFENVIDX */
                'expressionValue' => 'Self',
            ]);
            break;

        default:
	        if($modifier['func'] === 'GangItemModifier'
	           || $modifier['func'] === 'GangRequiredSkillModifier') {
		        break;
	        }
	        
	        echo $effect['modifierInfo']."\n";
            fatal("modifierInfo has unknown domain: ".$modifier['domain']);
            
        }

        switch($modifier['func']) {

        case 'ItemModifier':
            $add = 6; /* AIM */
            $remove = 58; /* RIM */

	        $att = query_or_insert_expression($json, [
		        'operandID' => 12, /* ATT */
		        'arg1' => $domain,
		        'arg2' => $modifiedattribute,
	        ]);
	        
            break;

        case 'LocationGroupModifier':
	        $add = 7; /* ALGM */
	        $remove = 59; /* RLGM */

            $domain = query_or_insert_expression($json, [
                'operandID' => 48, /* LG */
                'arg1' => $domain,
                'arg2' => query_or_insert_expression($json, [
                    'operandID' => 26, /* DEFGROUP */
                    'expressionGroupID' => $modifier['groupID'],
                ]),
            ]);
            
	        $att = query_or_insert_expression($json, [
		        'operandID' => 12, /* ATT */
		        'arg1' => $domain,
		        'arg2' => $modifiedattribute,
	        ]);
            
	        break;

        case 'LocationRequiredSkillModifier':
        case 'OwnerRequiredSkillModifier':
	        if($modifier['func'] === 'LocationRequiredSkillModifier') {
		        $add = 9; /* ALRSM */
		        $remove = 61; /* RLRSM */
	        } else {
		        $add = 11; /* AORSM */
		        $remove = 62; /* RORSM */
	        }

            $domain = query_or_insert_expression($json, [
                'operandID' => 49, /* LS */
                'arg1' => $domain,
                'arg2' => query_or_insert_expression($json, [
                    'operandID' => 29, /* DEFTYPEID */
                    'expressionTypeID' => $modifier['skillTypeID'],
                ]),
            ]);
            
	        $att = query_or_insert_expression($json, [
		        'operandID' => 12, /* ATT */
		        'arg1' => $domain,
		        'arg2' => $modifiedattribute,
	        ]);
            
            break;

        case 'GangItemModifier':
	        $add = 3; /* AGIM */
	        $remove = 55; /* RGIM */
	        $att = $modifiedattribute;
	        break;

        case 'GangRequiredSkillModifier':
	        $add = 5; /* AGRSM */
	        $remove = 57; /* RGRSM */

	        $domain = query_or_insert_expression($json, [
	            'operandID' => 29, /* DEFTYPEID */
	            'expressionTypeID' => $modifier['skillTypeID'],
            ]);

	        $att = query_or_insert_expression($json, [
		        'operandID' => 64, /* RSA */
		        'arg1' => $domain,
		        'arg2' => $modifiedattribute,
	        ]);
            
            break;
            
        default:
	        echo $effect['modifierInfo']."\n";
            fatal("modifierInfo has unknown func: ".$modifier['func']);

        }

        if(!isset($att)) {
	        fatal("no att to build expression");
        }

        /* XXX: this is guesswork */
        switch($modifier['operator']) {
		case -1:
	        /* XXX: this is also guesswork */
            $assocstring = 'PreMul';
            break;
        case 0:
	        /* XXX: this is REALLY guesswork */
            $assocstring = 'PreMul';
            break;
	        
        case 2:
            $assocstring = 'ModAdd';
            break;

        case 4:
	        /* XXX: this is REALLY guesswork */
            $assocstring = 'PostMul';
            break;

        case 5:
            $assocstring = 'PostDiv';
            break;

        case 6:
	        $assocstring = 'PostPercent';
	        break;

        case 7:
	        /* XXX: this is REALLY guesswork */
	        $assocstring = 'PostAssignment'; /* Or is it Post? Or anything else? */
	        break;
            
        default:
	        echo $effect['modifierInfo']."\n";
            fatal("modifierInfo has unknown operator: ".$modifier['operator']);
            
        }

        $association = mkexpr_association($json, $assocstring);

        $eff = query_or_insert_expression($json, [
            'operandID' => 31, /* EFF */
            'arg1' => $association,
            'arg2' => $att,
        ]);

        $modifier['preExpression'] = query_or_insert_expression($json, [
            'operandID' => $add,
            'arg1' => $eff,
            'arg2' => $modifyingattribute,
        ]);

        $modifier['postExpression'] = query_or_insert_expression($json, [
            'operandID' => $remove,
            'arg1' => $eff,
            'arg2' => $modifyingattribute,
        ]);
    }

    $effect['preExpression'] = combine_expressions($json, array_column(
        $info, 'preExpression'
    ));
    $effect['postExpression'] = combine_expressions($json, array_column(
        $info, 'postExpression'
    ));
}

/* Expression for the AAR charge:
 * ((CurrentOther->armorDamageAmount).(PreMul)).AddItemModifier (CurrentOther->chargedArmorDamageMultiplier)
 * Real dogma wouldn't accept this.
 */

/* Effect for the Nanite Repair Paste when used in an Ancillary Armor Repairer */
$json['effects'][-10] = array(
	'effectName' => 'internalAAREffect',
	'effectID' => -10,
	'effectCategory' => 0,
	'preExpression' => $id = mkexpr_aim($json, 'PreMul', 'Other', 84, mkexpr_att($json, 'Other', 1886), true),
	'postExpression' => flip_modifiers($json, $id),
	'durationAttributeID' => null,
	'trackingSpeedAttributeID' => null,
	'dischargeAttributeID' => null,
	'rangeAttributeID' => null,
	'falloffAttributeID' => null,
	'fittingUsageChanceAttributeID' => null,
);

/* Add effect -10 to Nanite Repair Paste */
$json['typeeffects'][] = array(
	'typeID' => 28668,
	'effectID' => -10,
);

/* warpDisruptSphere: guess the expression from description. Units
 * suggest it's using PostPercent for everything. */
$makeWDSModifier = function($func, $destattribute, $srcattribute) use(&$json) {
    return query_or_insert_expression($json, [
        'operandID' => $func,
        'arg1' => query_or_insert_expression($json, [
            'operandID' => 31, /* EFF */
            'arg1' => query_or_insert_expression($json, [
                'operandID' => 21, /* DEFASSOCIATION */
                'expressionValue' => 'PostPercent',
            ]),
            'arg2' => query_or_insert_expression($json, [
                'operandID' => 12, /* ATT */
                'arg1' => query_or_insert_expression($json, [
                    'operandID' => 24, /* DEFENVIDX */
                    'expressionValue' => 'Ship',
                ]),
                'arg2' => query_or_insert_expression($json, [
                    'operandID' => 22, /* DEFATTRIBUTE */
                    'expressionAttributeID' => $destattribute,
                ]),
            ]),
        ]),
        'arg2' => query_or_insert_expression($json, [
            'operandID' => 22, /* DEFATTRIBUTE */
            'expressionAttributeID' => $srcattribute,
        ]),
    ]);
};

$makeWDSGroupModifier = function($func, $groupid, $destattribute, $srcattribute) use(&$json) {
    return query_or_insert_expression($json, [
        'operandID' => $func,
        'arg1' => query_or_insert_expression($json, [
            'operandID' => 31, /* EFF */
            'arg1' => query_or_insert_expression($json, [
                'operandID' => 21, /* DEFASSOCIATION */
                'expressionValue' => 'PostPercent',
            ]),
            'arg2' => query_or_insert_expression($json, [
                'operandID' => 12, /* ATT */
                'arg1' => query_or_insert_expression($json, [
                    'operandID' => 48, /* LG */
                    'arg1' => query_or_insert_expression($json, [
                        'operandID' => 24, /* DEFENVIDX */
                        'expressionValue' => 'Ship',
                    ]),
                    'arg2' => query_or_insert_expression($json, [
                        'operandID' => 26, /* DEFGROUP */
                        'expressionGroupID' => $groupid,
                    ]),
                ]),
                'arg2' => query_or_insert_expression($json, [
                    'operandID' => 22, /* DEFATTRIBUTE */
                    'expressionAttributeID' => $destattribute,
                ]),
            ]),
        ]),
        'arg2' => query_or_insert_expression($json, [
            'operandID' => 22, /* DEFATTRIBUTE */
            'expressionAttributeID' => $srcattribute,
        ]),
    ]);
};

$json['effects'][3380]['preExpression'] = combine_expressions($json, [
    $makeWDSModifier(6 /* AIM */, 4, 1131), /* Mass */
    $makeWDSModifier(6 /* AIM */, 552, 554), /* Signature radius */
    $makeWDSGroupModifier(7 /* ALGM */, 46, 567, 1270), /* AB and MWD Thrust */
    $makeWDSGroupModifier(7 /* ALGM */, 46, 20, 1164), /* AB and MWD Max velocity */
]);
$json['effects'][3380]['postExpression'] = combine_expressions($json, [
    $makeWDSModifier(58 /* RIM */, 4, 1131), /* Mass */
    $makeWDSModifier(58 /* RIM */, 552, 554), /* Signature radius */
    $makeWDSGroupModifier(59 /* RLGM */, 46, 567, 1270), /* AB and MWD Thrust */
    $makeWDSGroupModifier(59 /* RLGM */, 46, 20, 1164), /* AB and MWD Max velocity */
]);

/* moduleBonusAfterburner:
 * ship mass += massAddition
 * speedFactor *= speedBoostFactor (thrust)
 * speedFactor /= ship mass
 * ship maxVelocity PostPercent speedFactor */
$json['effects'][6731]['preExpression'] = combine_expressions($json, [
	mkexpr_aim($json, 'ModAdd', 'Ship', 4, 796),
	mkexpr_aim($json, 'PostMul', 'Self', 20, 567),
	mkexpr_aim($json, 'PostDiv', 'Self', 20, mkexpr_att($json, 'Ship', 4), true),
	mkexpr_aim($json, 'PostPercent', 'Ship', 37, 20),
]);
$json['effects'][6731]['postExpression'] = flip_modifiers($json, $json['effects'][6731]['preExpression']);

/* moduleBonusMicrowarpdrive:
 * same as afterburner
 * ship signatureRadius PostPercent signatureRadiusBonus */
$json['effects'][6730]['preExpression'] = combine_expressions($json, [
	$json['effects'][6731]['preExpression'],
	mkexpr_aim($json, 'PostPercent', 'Ship', 552, 554),
]);
$json['effects'][6730]['postExpression'] = flip_modifiers($json, $json['effects'][6730]['preExpression']);

/* skillEffect: bogus/unknown DEFASSOCIATION, skills are handled
 * correctly without it anyway */
$json['effects'][132]['preExpression'] = -1;
$json['effects'][132]['postExpression'] = -1;

/* online: inconsistent category, WTF? */
$json['effects'][16]['effectCategory'] = 4;

/* online: skip all the CPU/Power/Skill checks, they only make sense
 * in game */
$json['effects'][16]['preExpression'] = 178;
$json['effects'][16]['postExpression'] = 180;

/* turretFitted: skip the hardpoint check */
$json['effects'][42]['preExpression'] = 304;
$json['effects'][42]['postExpression'] = 305;

/* launcherFitted: skip the hardpoint check */
$json['effects'][40]['preExpression'] = 318;
$json['effects'][40]['postExpression'] = 319;

/* maxRangeHiddenPreAssignmentWarpScrambleRange: not sure what this is or what it does, get rid of it */
$json['effects'][4894]['preExpression'] = -1;
$json['effects'][4894]['postExpression'] = -1;
/* scriptWarpDisruptionFieldGeneratorSetScriptCapacitorNeedHidden: same */
$json['effects'][3615]['preExpression'] = -1;
$json['effects'][3615]['postExpression'] = -1;

/* adaptiveArmorHardener: use fallback expression from damage control */
$json['effects'][4928]['preExpression'] = 7561;
$json['effects'][4928]['postExpression'] = 7562;

/* shieldBoosting: ignore effect, not useful here */
$json['effects'][4]['preExpression'] = -1;
$json['effects'][4]['postExpression'] = -1;

/* shieldTransfer: ignore effect, not useful here */
$json['effects'][18]['preExpression'] = -1;
$json['effects'][18]['postExpression'] = -1;

/* armorRepair: ignore effect, not useful here */
$json['effects'][27]['preExpression'] = -1;
$json['effects'][27]['postExpression'] = -1;

/* structureRepair: ignore effect, not useful here */
$json['effects'][26]['preExpression'] = -1;
$json['effects'][26]['postExpression'] = -1;

/* targetArmorRepair: ignore effect, not useful here */
$json['effects'][592]['preExpression'] = -1;
$json['effects'][592]['postExpression'] = -1;

/* microJumpDrive: apply sigradius penalty */
$json['effects'][4921]['preExpression'] = 7501;
$json['effects'][4921]['postExpression'] = 7502;

/* microJumpPortalDrive: apply sigradius penalty */
$json['effects'][6208]['preExpression'] = 7501;
$json['effects'][6208]['postExpression'] = 7502;

fwrite($c, "static const dogma_effect_t dogma_table_effects[] = {\n");
foreach($json['effects'] as $id => $e) {
	if(!array_key_exists('effectName', $e)) {
		warn("effect {$id} is stale, ignoring");
		continue;
	}
	
	fwrite($c, "\t{ "
	       .$e['effectID']
	       .", ".(int)$e['effectCategory'].'U'
	       .", ".(int)$e['preExpression'].'U'
	       .", ".(int)$e['postExpression'].'U'
	       .", ".(int)$e['durationAttributeID'].'U'
	       .", ".(int)$e['trackingSpeedAttributeID'].'U'
	       .", ".(int)$e['dischargeAttributeID'].'U'
	       .", ".(int)$e['rangeAttributeID'].'U'
	       .", ".(int)$e['falloffAttributeID'].'U'
	       .", ".(int)$e['fittingUsageChanceAttributeID'].'U'
	       ." },\n");
}
fwrite($c, "\t{ 0, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U }\n");
fwrite($c, "};\n");

/* -------- Type attributes / Type effects -------- */

fwrite($c, "static const dogma_type_attribute_t dogma_table_type_attributes[] = {\n");
foreach($json['typeattribs'] as $ta) {
	fwrite($c, "\t{ "
	       .$ta['typeID'].'U'
	       .", ".$ta['attributeID'].'U'
	       .", ".$ta['value']
	       ." },\n");
}
fwrite($c, "\t{ 0U, 0U, 0 }\n");
fwrite($c, "};\n");

fwrite($c, "static const dogma_type_effect_t dogma_table_type_effects[] = {\n");
foreach($json['typeeffects'] as $te) {
	fwrite($c, "\t{ "
	       .$te['typeID'].'U'
	       .", ".$te['effectID']
	       ." },\n");
}
fwrite($c, "\t{ 0U, 0 }\n");
fwrite($c, "};\n");

/* -------- Operands -------- */

strip_index_operands($json);

fwrite($h, "enum dogma_operandid_e {\n");
fwrite($c, "static const dogma_operand_t dogma_table_operands[] = {\n");
foreach($json['operands'] as $op) {
	fwrite($c, "\t{ "
	       .$op['operandID']
	       .", ".escape_c_string($op['operandKey'])
	       .", ".escape_c_string($op['description'])
	       .", ".escape_c_string($op['format'])
	       ." },\n");
	
	fwrite($h, "\t/* ".$op['description']."\n"
	       ."\t * ".$op['format']." */\n"
	       ."\tDOGMA_".$op['operandKey']."=".$op['operandID'].",\n\n");
}
fwrite(
	$h,
	"};\n"
	."typedef enum dogma_operandid_e dogma_operandid_t;\n");

fwrite($h, "\n#endif\n");
fwrite($c, "\t{ 0, NULL, NULL, NULL }\n");
fwrite($c, "};\n");

/* -------- Expressions -------- */

/* Generic dummy expression */
$json['expressions'][-1] = array(
	'expressionID' => -1,
	'operandID' => 23, /* DEFBOOL */
	'expressionValue' => '0',
	'expressionAttributeID' => null,
	'expressionGroupID' => null,
	'expressionTypeID' => null,
	'arg1' => null,
	'arg2' => null,
);

strip_index_expressions($json);

fwrite($c, "static const dogma_expression_t dogma_table_expressions[] = {\n");
foreach($json['expressions'] as $e) {
	if($e['operandID'] === 21) { /* DEFASSOCIATION */
		/* Incorrect values will produce compilation errors, so no
		 * checks here */
		$dataname = 'assoctype';
		$data = "DOGMA_ASSOC_".$e['expressionValue'];
	} else if($e['operandID'] === 22) { /* DEFATTRIBUTE */
		$dataname = 'attributeid';
		$data = $e['expressionAttributeID'].'U';		
	} else if($e['operandID'] === 23) { /* DEFBOOL */
		$dataname = 'boolv';
		$data = ($e['expressionValue'] === '1') ? 'true' : 'false';
	} else if($e['operandID'] === 24) { /* DEFENVIDX */
		/* Incorrect values will produce compilation errors, so no
		 * checks here */
		$dataname = 'envidx';
		$data = 'DOGMA_ENVIDX_'.$e['expressionValue'];
	} else if($e['operandID'] === 25) { /* DEFFLOAT */
		$dataname = 'floatv';
		$data = $e['expressionValue'];
	} else if($e['operandID'] === 26) { /* DEFGROUP */
		$dataname = 'groupid';
		$data = $e['expressionGroupID'].'U';	
	} else if($e['operandID'] === 27) { /* DEFINT */
		$dataname = 'intv';
		$data = $e['expressionValue'];
	} else if($e['operandID'] === 28) { /* DEFSTRING */
		$dataname = 'value';
		$data = escape_c_string($e['expressionValue']);
	} else if($e['operandID'] === 29) { /* DEFTYPEID */
		$dataname = 'typeid';
		$data = $e['expressionTypeID'].'U';
	} else {
		$dataname = 'value';
		$data = 'NULL';
	}

	fwrite($c, "\t{ "
	       .".id = ".$e['expressionID']
	       .", .operandid = DOGMA_".$json['operands'][$e['operandID']]['operandKey']
	       .", .arg1 = ".(int)$e['arg1']
	       .", .arg2 = ".(int)$e['arg2']
	       .", .".$dataname." = ".$data
	       ." },\n");
}
fwrite($c, "\t{ .id = 0U, .operandid = 0, .arg1 = 0, .arg2 = 0, .value = NULL }\n");
fwrite($c, "};\n");

/* -------- dogma-names.h -------- */

fclose($c);
fclose($h);

$targetsource = __DIR__.'/../include/dogma-names.h';
$c = fopen($targetsource, 'wb');
if($c === false) fatal('could not open '.$targetsource.' for writing');

fwrite(
	$c,
	"/* libdogma */\n\n"
	."/* THIS FILE HAS BEEN AUTOGENERATED. DO NOT MODIFY IT MANUALLY.\n"
	." * IT IS NOT COVERED BY THE LICENSE IN THE COPYING FILE.\n"
	." *\n"
	." * ".__FILE__."\n"
	." * ".date('r')." */\n"
	."\n"
	."#pragma once\n"
	."#ifndef _DOGMA_NAMES_H\n"
	."#define _DOGMA_NAMES_H 1 \n"
	."\n\n\n"
);

function mangle_name($s) {
	return ucfirst(preg_replace('%[^A-Za-z0-9]%', '', $s));
}

function write_defines($prefix, array $a, $namekey, $idkey) {
	global $c;

	$names = array();
	foreach($a as $t) {
		$mangled = mangle_name($t[$namekey]);
		if(isset($names[$mangled])) continue;
		$names[$mangled] = true;

		fwrite($c, "#define ".$prefix.$mangled." ".$t[$idkey]."\n");
	}

	fwrite($c, "\n\n\n");
}

write_defines('TYPE_', $json['types'], 'typeName', 'typeID');
write_defines('ATT_', $json['attribs'], 'attributeName', 'attributeID');
write_defines('EFFECT_', $json['effects'], 'effectName', 'effectID');
write_defines('GROUP_', $json['groups'], 'groupName', 'groupID');
write_defines('CAT_', $json['categories'], 'categoryName', 'categoryID');

fwrite($c, "\n\n#endif\n");
fclose($c);

/* -------- bruteforce-data.h -------- */

$targetsource = __DIR__.'/../test/bruteforce-data.h';
$c = fopen($targetsource, 'wb');
if($c === false) fatal('could not open '.$targetsource.' for writing');

fwrite(
	$c,
	"/* libdogma */\n\n"
	."/* THIS FILE HAS BEEN AUTOGENERATED. DO NOT MODIFY IT MANUALLY.\n"
	." * IT IS NOT COVERED BY THE LICENSE IN THE COPYING FILE.\n"
	." *\n"
	." * ".__FILE__."\n"
	." * ".date('r')." */\n"
	."\n"
	."#pragma once\n"
	."#ifndef _BF_NAMES_H\n"
	."#define _BF_NAMES_H 1 \n"
	."\n\n\n"
);

foreach([
	'implants' => [ 20, -303 ],
	'boosters' => [ 20, 303 ],
	'drones' => [ 18, null ],
	'ships' => [ 6, null ],
	'modules' => [ 7, null ],
	'subsystems' => [ 32, null ],
	'charges' => [ 8, null ],
] as $name => $filters) {
	fwrite($c, "static const unsigned int bf_{$name}[] = {\n");

	foreach($json['types'] as $t) {
		if($json['groups'][$t['groupID']]['categoryID'] !== $filters[0]) {
			continue;
		}
		
		if($filters[1] !== null && (
			($filters[1] > 0 && $t['groupID'] !== $filters[1])
            ||
			($filters[1] < 0 && $t['groupID'] === $filters[1])
		)) {
			continue;
		}

		fwrite($c, "\t".$t['typeID']."U,\n");
	}
	
	fwrite($c, "\t0U\n};\n\n");
}

fwrite($c, "static const unsigned int bf_attributes[] = {\n");
foreach($json['attribs'] as $a) {
	fwrite($c, "\t".$a['attributeID']."U,\n");
}
fwrite($c, "\t0U\n};\n\n");

fwrite($c, "\n\n#endif\n");
fclose($c);

info(' ~~~ all done! ~~~ ');
